#+TITLE Emacs Literate Config
* Base Emacs configuration
** Basic window configuration
#+begin_src emacs-lisp :tangle yes
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src
** Highlight lines over 80 chars
#+begin_src emacs-lisp :tangle yes
(defvar whitespace-line-column)
(defvar whitespace-style)
(setq whitespace-line-column 80)
(setq whitespace-style '(face lines-tail))

(add-hook 'prog-mode-hook 'whitespace-mode)
#+end_src
** Set backup directory
#+begin_src emacs-lisp :tangle yes
(setq backup-directory-alist '(("." . "~/.local/share/emacs/backups")))

(let ((backup-dir (cdr (car backup-directory-alist))))
  (when (not (file-exists-p backup-dir))
    (make-directory backup-dir t)))
#+end_src
** Set indentation width
#+begin_src emacs-lisp :tangle yes
(setq-default indent-tabs-mode nil)
(setq tab-width 2)
#+end_src
** Enable electric-pair-mode
#+begin_src emacs-lisp :tangle yes
(electric-pair-mode)
#+end_src
** Display line numbers
#+begin_src emacs-lisp :tangle yes
(add-hook 'text-mode-hook #'display-line-numbers-mode)
(add-hook 'prog-mode-hook #'display-line-numbers-mode)
(add-hook 'conf-mode-hook #'display-line-numbers-mode)
#+end_src
** Visual lines in text modes
#+begin_src emacs-lisp :tangle yes
(add-hook 'text-mode-hook #'visual-line-mode)
(add-hook 'org-mode-hook #'visual-line-mode)
#+end_src
** org-indent-mode
#+begin_src emacs-lisp :tangle yes
(add-hook 'org-mode-hook #'org-indent-mode)
#+end_src
** Enable Flyspell
#+begin_src emacs-lisp :tangle yes
(add-hook 'text-mode-hook #'flyspell-mode)
(add-hook 'org-mode-hook #'flyspell-mode)
#+end_src
** Use human-readable sizes in dired-mode
#+begin_src emacs-lisp :tangle yes
(setq dired-listing-switches "-alh")
#+end_src
* Packages
#+begin_src emacs-lisp :tangle yes
(require 'package)
#+end_src
** Package archive setup
#+begin_src emacs-lisp :tangle yes
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/"))
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))
#+end_src
** package setup
#+begin_src emacs-lisp :tangle yes
(setq package-enable-at-startup nil)
(package-initialize)
#+end_src
** Package management
#+begin_src emacs-lisp :tangle yes
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
  (require 'use-package))
(defvar auto-package-update-delete-old-versions)
(defvar auto-package-update-hide-results)

(use-package auto-package-update
  :config
  (setq auto-package-update-delete-old-versions t)
  (setq auto-package-update-hide-results t)
  (auto-package-update-maybe))
#+end_src
** evil
#+begin_src emacs-lisp :tangle yes
(use-package evil
  :init
  (setq evil-want-C-u-scroll t)
  :config
  (evil-mode)
  (defun evil-next-line--check-visual-line-mode (orig-fun &rest args)
    (if visual-line-mode
        (apply 'evil-next-visual-line args)
      (apply orig-fun args)))
  
  (advice-add 'evil-next-line :around 'evil-next-line--check-visual-line-mode)
  
  (defun evil-previous-line--check-visual-line-mode (orig-fun &rest args)
    (if visual-line-mode
        (apply 'evil-previous-visual-line args)
      (apply orig-fun args)))
  
  (advice-add
   'evil-previous-line
   :around 'evil-previous-line--check-visual-line-mode)
  (evil-define-command evil-delete-buffer (buffer &optional bang)
    "Deletes a buffer.
This is to override the default :bd ex-mode command with a version that
does not close the window it was used in."
    (interactive "<b><!>")
    (with-current-buffer (or buffer (current-buffer))
      (when bang
        (set-buffer-modified-p nil)
        (dolist (process (process-list))
          (when (eq (process-buffer process) (current-buffer))
            (set-process-query-on-exit-flag process nil))))
      ;; get all windows that show this buffer
      (let ((wins (get-buffer-window-list (current-buffer) nil t)))
        ;; if the buffer which was initiated by emacsclient,
        ;; call `server-edit' from server.el to avoid
        ;; "Buffer still has clients" message
        (if (and (fboundp 'server-edit)
                 (boundp 'server-buffer-clients)
                 server-buffer-clients)
            (server-edit)
          (kill-buffer nil))))))

(use-package evil-surround
  :config
  (global-evil-surround-mode))

(use-package evil-snipe
  :config
  (evil-snipe-mode)
  (setq evil-snipe-scope 'whole-visible))

(use-package evil-exchange
  :config
  (evil-exchange-install))

(use-package evil-visualstar
  :config
  (setq evil-visualstar/persistent nil))

(use-package evil-args
  :bind (
         :map evil-inner-text-objects-map
         ("a" . evil-inner-arg)
         :map evil-outer-text-objects-map
         ("a" . evil-outer-arg)
         :map evil-normal-state-map
         ("L" . evil-forward-arg)
         ("H" . evil-backward-arg)
         ("K" . evil-jump-out-args)
         :map evil-motion-state-map
         ("L" . evil-forward-arg)
         ("H" . evil-backward-arg)))
         
(use-package evil-magit)
#+end_src
** Theme
#+begin_src emacs-lisp :tangle yes
(use-package one-themes
  :config
  (load-theme 'one-dark t))
(use-package powerline)

(use-package powerline-evil
  :after (powerline)
  :config
  (powerline-evil-vim-color-theme))
#+end_src
** General programming tooling
#+begin_src emacs-lisp :tangle yes
(use-package flycheck
  :config
  (global-flycheck-mode)
  (setq flycheck-disabled-checkers '(emacs-lisp-checkdoc)))

(use-package company
  :config
  (add-hook 'after-init-hook 'global-company-mode))

(use-package magit)

(use-package projectile)

(use-package helm-projectile)

(use-package lsp-mode)
#+end_src
** Text editing
#+begin_src emacs-lisp :tangle yes
(use-package yasnippet
  :config
  (yas-global-mode))

(use-package yasnippet-snippets)

(use-package highlight-indentation
  :hook (prog-mode . highlight-indentation-mode))

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

(use-package aggressive-indent
  :config
  (global-aggressive-indent-mode 1)
  (add-to-list 'aggressive-indent-excluded-modes 'web-mode)
  (add-to-list 'aggressive-indent-excluded-modes 'haskell-mode))

(use-package smartparens
  :config
  (require 'smartparens-config)
  (add-hook 'alchemist-mode-hook 'smartparens-mode))

(use-package ace-jump-mode)
#+end_src
** Languages
#+begin_src emacs-lisp :tangle yes
(use-package haskell-mode
  :mode "\\hs\\'"
  :hook (haskell-mode . electric-indent-mode))
(use-package intero
  :hook (haskell-mode . intero-mode))
  
(use-package elixir-mode
  :mode "\\.exs?\\'")

(use-package alchemist
  :mode ("\\.exs?\\'" . alchemist-mode))

(use-package web-mode
  :mode "\\.html\\.l?eex\\'")

(use-package meghanada
  :mode ("\\.java\\'" . meghanada-mode)
  :config
  (setq meghanada-java-path "java")
  (setq meghanada-maven-path "mvn")
  (defun java-hook ()
    "Hook when java mode is entered."
    (add-hook 'before-save-hook 'meghanada-code-beautify-before-save))

  (add-hook 'java-mode-hook 'java-hook))

(use-package js2-mode
  :mode "\\.js\\'"
  :config
  (add-hook 'js2-menu-hook #'js2-imenu-extras-mode)
  (add-hook 'js2-mode-hook #'js2-refactor-mode))

(use-package js2-refactor)
  
(use-package rust-mode
  :mode "\\.js\\'")
#+end_src
** Misc
#+begin_src emacs-lisp :tangle yes
(use-package anzu
  :config
  (global-anzu-mode))

(use-package org-bullets
  :hook (org-mode . org-bullets-mode))

(use-package which-key)

(use-package bind-map)

(use-package restart-emacs
  :bind (:map leader-keymap
         ("q r" . prompt-restart-emacs)))

(use-package helm
  :config
  (helm-mode))

(use-package shell-pop)

(use-package imenu-anywhere)

(use-package shackle
  :config
  (setq shackle-rules '(("\\`\\*helm.*?\\*\\'" :regexp t :popup t :ratio 0.4)))
  (shackle-mode))
  
(use-package visual-fill-column
  :hook (visual-line-mode . visual-fill-column-mode))
#+end_src
* Keybindings
#+begin_src emacs-lisp :tangle yes
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
(global-set-key (kbd "M-x") 'helm-M-x)
#+end_src
** Helper functions
#+begin_src emacs-lisp :tangle yes
(defun prompt-kill-emacs ()
  "Prompt the user to kill Emacs."
  (interactive)
  (when (y-or-n-p "Quit Emacs? ")
    (kill-emacs)))

(defun prompt-restart-emacs ()
  "Prompt the user to restart Emacs."
  (interactive)
  (when (y-or-n-p "Restart Emacs? ")
    (restart-emacs)))

(defun open-config ()
  "Open config file."
  (interactive)
  (find-file "~/.config/emacs/config.org"))

(defun load-init-el ()
  "Load init.el."
  (interactive)
  (load "~/.config/emacs/init.el"))
#+end_src 
** leader-keymap
#+begin_src emacs-lisp :tangle yes
(bind-map leader-keymap
  :evil-keys ("SPC")
  :evil-states (normal visual))
  
(define-key dired-mode-map (kbd "SPC") leader-keymap)

(bind-map-set-keys leader-keymap
  "SPC" 'helm-M-x
  "TAB" 'mode-line-other-buffer
  "b" 'helm-buffers-list
  "d" 'kill-this-buffer
  "D" 'kill-buffer-and-window
  "f" 'helm-find-files
  "s" 'yas-insert-snippet
  "t" 'shell-pop
  "m w" 'ace-jump-word-mode
  "m l" 'ace-jump-line-mode
  "p f" 'helm-projectile-find-file
  "p F" 'helm-projectile-find-other-file
  "p b" 'helm-projectile
  "p r" 'projectile-run-project
  "p c" 'projectile-compile-project
  "p t" 'projectile-run-term
  "p x" 'projectile-run-shell-command-in-root
  "C i" 'open-config
  "C l" 'load-init-el
  "q q" 'prompt-kill-emacs
  "q r" 'prompt-restart-emacs
  "g g" 'magit-status
  "g c" 'magit-commit-create
  "g s" 'magit-stage-file)
#+end_src
** elisp-keymap
#+begin_src emacs-lisp :tangle yes
(bind-map-for-mode-inherit elisp-keymap leader-keymap
  :major-modes (emacs-lisp-mode lisp-interaction-mode))

(defvar elisp-eval-keymap (make-sparse-keymap))

(define-key elisp-keymap (kbd "e") elisp-eval-keymap)

(bind-map-set-keys elisp-eval-keymap
  "r" 'eval-region
  "b" 'eval-buffer
  "f" 'eval-defun
  "e" 'eval-expression)
#+end_src
* Misc configuration
** org-mode
#+begin_src emacs-lisp :tangle yes
(defvar org-html-head-include-default-style)
(defvar org-html-head)
(defvar org-latex-packages-alist)
(defvar org-latex-toc-command)

(defun my-org-inline-css-hook (exporter)
  "Insert custom inline css.
EXPORTER unusued"
  (when (eq exporter 'html)
    (let* ((dir (ignore-errors (file-name-directory (buffer-file-name))))
           (path (concat dir "style.css"))
           (homestyle (or (null dir) (null (file-exists-p path))))
           (final (if homestyle "~/.emacs.d/org-style.css" path)))
      (setq org-html-head-include-default-style nil)
      (setq org-html-head (concat
                           "<style type=\"text/css\">\n"
                           "<!--/*--><![CDATA[/*><!--*/\n"
                           (with-temp-buffer
                             (insert-file-contents final)
                             (buffer-string))
                           "/*]]>*/-->\n"
                           "</style>\n")))))

(add-hook 'org-export-before-processing-hook 'my-org-inline-css-hook)

(setq org-latex-packages-alist '(("margin=1in" "geometry" nil)))
(setq org-latex-toc-command "\\tableofcontents \\clearpage")
#+end_src
